<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="PRG_KFE_RIX_VAC" Id="{7118719b-3077-4104-9acc-cffb49d6edd3}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM PRG_KFE_RIX_VAC
VAR
vfs_dummy_gauge : ST_VG;
bm_dummy_gauge : ST_VG;

st_LI3K2_K2B_VWC_1_dummy_gauge : ST_VG;

iWatchdog: UDINT;
qRIXS_ROUGH_GPI_02:FB_TGPI_ADS;
qRIXS_PRO_01:FB_PRO_ADS;

bSP1K2_PAX_VRC_1_ILK : BOOL := FALSE;
bSP1K2_PAX_VRC_2_ILK : BOOL := FALSE;
bSP1K2_PAX_VRC_3_ILK : BOOL := FALSE;
bSP1K2_PAX_VRC_4_ILK : BOOL := FALSE;
bSP1K2_PAX_VRC_5_ILK : BOOL := FALSE;

bAT3K2_SOLID_VWC_01_ILK: BOOL;
rAT3K2_SOLID_VWC_01_US_PRESS_SP : REAL := 0.0001;
rAT3K2_SOLID_VWC_01_DS_PRESS_SP : REAL := 0.0001;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[// MKS275 Gauges

fb_PC1K1_ZOS_GPI_1(PG=>);
fb_PC1K1_ZOS_GPI_1.M_SetBits(30518);
fb_MR1K2_SWITCH_GPI_1(PG=>);
fb_MR1K2_SWITCH_GPI_1.M_SetBits(30518);
fb_TV1K1_PLEG_GPI_1(PG=>);
fb_TV1K1_PLEG_GPI_1.M_SetBits(30518);
fb_SL1K2_EXIT_GPI_1(PG=>);
fb_SL1K2_EXIT_GPI_1.M_SetBits(30518);
fb_ST1K2_PPS_GPI_1(PG=>);
fb_MR2K2_FLAT_GPI_1(PG=>);
fb_MR2K2_FLAT_GPI_1.M_SetBits(30518);
fb_MR3K2_KBH_GPI_1(PG=>);
fb_MR3K2_KBH_GPI_1.M_SetBits(30518);
fb_MR4K2_KBV_GPI_1(PG=>);
fb_MR4K2_KBV_GPI_1.M_SetBits(30518);
fb_SP1K2_PAX_GPI_1(PG=>);
fb_SP1K2_PAX_GPI_1.M_SetBits(30518);
fb_SP1K2_PAX_GPI_2(PG=>);
fb_SP1K2_PAX_GPI_2.M_SetBits(30518);
fb_IM5K2_PPM_GPI_1(PG=>);
fb_IM5K2_PPM_GPI_1.M_SetBits(30518);

//New Superbee piranis
fb_TM2K2_ATM_GPI_1(PG=>);
fb_TM2K2_ATM_GPI_1.M_SetBits(30518);
fb_AT3K2_SOLID_GPI_1(PG=>);

//beamline dummy gauge
bm_dummy_gauge.xPRESS_OK := TRUE;
bm_dummy_gauge.xAT_VAC := TRUE;
bm_dummy_gauge.eState := ValidLo;
bm_dummy_gauge.rPRESS := 1e-4;

// MKS500 Gauges

fb_PC1K1_ZOS_GCC_1(PG := fb_PC1K1_ZOS_GPI_1.PG, bEP := FALSE);
fb_PC1K1_ZOS_GCC_1.M_SetBits(30518);
fb_MR1K2_SWITCH_GCC_1(PG := fb_MR1K2_SWITCH_GPI_1.PG, bEP := FALSE);
fb_MR1K2_SWITCH_GCC_1.M_SetBits(30518);
fb_TV1K1_PLEG_GCC_1(PG := fb_TV1K1_PLEG_GPI_1.PG, bEP := TRUE);
fb_TV1K1_PLEG_GCC_1.M_SetBits(30518);
fb_SL1K2_EXIT_GCC_1(PG := fb_SL1K2_EXIT_GPI_1.PG, bEP := FALSE);
fb_SL1K2_EXIT_GCC_1.M_SetBits(30518);
fb_ST1K2_PPS_GCC_1(PG := fb_ST1K2_PPS_GPI_1.PG, bEP := TRUE);
fb_MR2K2_FLAT_GCC_1(PG := fb_MR2K2_FLAT_GPI_1.PG, bEP := FALSE);
fb_MR2K2_FLAT_GCC_1.M_SetBits(30518);
fb_IM2K2_PPM_GCC_1(PG := fb_MR3K2_KBH_GPI_1.PG, bEP := FALSE);
fb_IM2K2_PPM_GCC_1.M_SetBits(30518);
fb_MR3K2_KBH_GCC_1(PG := fb_MR3K2_KBH_GPI_1.PG, bEP := False);
fb_MR3K2_KBH_GCC_1.M_SetBits(30518);
fb_IM3K2_PPM_GCC_1(PG := fb_MR4K2_KBV_GPI_1.PG, bEP := False);
fb_IM3K2_PPM_GCC_1.M_SetBits(30518);
fb_MR4K2_KBV_GCC_1(PG := fb_MR4K2_KBV_GPI_1.PG, bEP := False);
fb_MR4K2_KBV_GCC_1.M_SetBits(30518);
fb_IM4K2_PPM_GCC_1(PG := fb_MR4K2_KBV_GPI_1.PG, bEP := False);
fb_IM4K2_PPM_GCC_1.M_SetBits(30518);
fb_IM5K2_PPM_GCC_1(PG := bm_dummy_gauge, bEP := False);
fb_IM5K2_PPM_GCC_1.M_SetBits(30518);
fb_TM2K2_K2B_GCC_1(PG := bm_dummy_gauge, bEP := False);
fb_TM2K2_K2B_GCC_1.M_SetBits(30518);
fb_AT3K2_SOLID_GCC_1(PG := fb_AT3K2_SOLID_GPI_1.PG, bEP := TRUE);
fb_SP1K2_PAX_GCC_1(PG := fb_SP1K2_PAX_GPI_1.PG, bEP := False);
fb_SP1K2_PAX_GCC_1.M_SetBits(30518);
fb_SP1K2_PAX_GCC_2(PG := fb_SP1K2_PAX_GPI_2.PG);
fb_SP1K2_PAX_GCC_2.M_SetBits(30518);

fb_SP2K2_TXAS_GCP_1(PG=>);

//MKS422
fb_TV4K2_GFS_1(PG := bm_dummy_gauge);

// VGC Valves

fb_MR1K2_SWITCH_VGC_1(
                         i_stUSG := fb_PC1K1_ZOS_PIP_1.q_IG,
                         i_stDSG := fb_MR1K2_SWITCH_PIP_1.q_IG,
                         i_xDis_DPIlk := FALSE,
                         i_xEPS_OK := TRUE,
                         i_xPMPS_OK := TRUE,
                         i_xExt_OK := TRUE,
                         i_xOverrideMode := xSystemOverrideMode1,
                         io_fbFFHWO := g_FastFaultOutput1, fbArbiter := fbArbiter1);
fb_MR1K2_SWITCH_VGC_2(
                         i_stUSG := fb_MR1K2_SWITCH_PIP_1.q_IG,
                         i_stDSG := fb_TV1K1_PLEG_PIP_1.q_IG,
                         i_xDis_DPIlk := FALSE,
                         i_xEPS_OK := TRUE,
                         i_xPMPS_OK := TRUE,
                         i_xExt_OK := fb_TV1K2_VFS_Interface.i_xVAC_FAULT_OK,
                         i_xOverrideMode := xSystemOverrideMode1,
                         io_fbFFHWO := g_FastFaultOutput1, fbArbiter := fbArbiter1);

fb_SL1K2_EXIT_VGC_1(
                         i_stUSG := fb_TV1K1_PLEG_PIP_1.q_IG,
                         i_stDSG := fb_SL1K2_EXIT_PIP_1.q_IG,
                         i_xDis_DPIlk := FALSE,
                         i_xEPS_OK := TRUE,
                         i_xPMPS_OK := TRUE,
                         i_xExt_OK := fb_TV1K2_VFS_Interface.i_xVAC_FAULT_OK,
                         i_xOverrideMode := xSystemOverrideMode1,
                         io_fbFFHWO := g_FastFaultOutput1, fbArbiter := fbArbiter1);

fb_ST1K2_PPS_VGC_1(
                         i_stUSG := fb_SP1K2_PAX_PIP_1.q_IG,
                         i_stDSG := fb_ST1K2_PPS_PIP_1.q_IG,
                         i_xDis_DPIlk := FALSE,
                         i_xEPS_OK := TRUE,
                         i_xPMPS_OK := TRUE,
                         i_xExt_OK := TRUE,
                         i_xOverrideMode := xSystemOverrideMode1,
                         io_fbFFHWO := g_FastFaultOutput1, fbArbiter := fbArbiter1);

fb_MR2K2_FLAT_VGC_1(
                         i_stUSG := fb_ST1K2_PPS_PIP_1.q_IG,
                         i_stDSG := fb_MR2K2_FLAT_PIP_1.q_IG,
                         i_xDis_DPIlk := FALSE,
                         i_xEPS_OK := TRUE,
                         i_xPMPS_OK := TRUE,
                         i_xExt_OK := TRUE,
                         i_xOverrideMode := xSystemOverrideMode2,
                         io_fbFFHWO := g_FastFaultOutput2, fbArbiter := fbArbiter2);

fb_MR2K2_FLAT_VGC_2(
                         i_stUSG := fb_MR2K2_FLAT_PIP_1.q_IG,
                         i_stDSG := fb_IM2K2_PPM_PIP_1.q_IG,
                         i_xDis_DPIlk := FALSE,
                         i_xEPS_OK := TRUE,
                         i_xPMPS_OK := TRUE,
                         i_xExt_OK := TRUE,
                         i_xOverrideMode := xSystemOverrideMode2,
                         io_fbFFHWO := g_FastFaultOutput2, fbArbiter := fbArbiter2);

fb_MR3K2_KBH_VGC_1(
                         i_stUSG := fb_IM2K2_PPM_PIP_1.q_IG,
                         i_stDSG := fb_MR3K2_KBH_PIP_1.q_IG,
                         i_xDis_DPIlk := FALSE,
                         i_xEPS_OK := TRUE,
                         i_xPMPS_OK := TRUE,
                         i_xExt_OK := TRUE,
                         i_xOverrideMode := xSystemOverrideMode2,
                         io_fbFFHWO := g_FastFaultOutput2, fbArbiter := fbArbiter2);

fb_MR3K2_KBH_VGC_2(
                         i_stUSG := fb_MR3K2_KBH_PIP_1.q_IG,
                         i_stDSG := fb_IM3K2_PPM_PIP_1.q_IG,
                         i_xDis_DPIlk := FALSE,
                         i_xEPS_OK := TRUE,
                         i_xPMPS_OK := TRUE,
                         i_xExt_OK := TRUE,
                         i_xOverrideMode := xSystemOverrideMode2,
                         io_fbFFHWO := g_FastFaultOutput2, fbArbiter := fbArbiter2);

fb_MR4K2_KBV_VGC_1(
                         i_stUSG := fb_IM3K2_PPM_PIP_1.q_IG,
                         i_stDSG := fb_MR4K2_KBV_PIP_1.q_IG,
                         i_xDis_DPIlk := FALSE,
                         i_xEPS_OK := TRUE,
                         i_xPMPS_OK := TRUE,
                         i_xExt_OK := TRUE,
                         i_xOverrideMode := xSystemOverrideMode2,
                         io_fbFFHWO := g_FastFaultOutput2, fbArbiter := fbArbiter2);

fb_MR4K2_KBV_VGC_2(
                         i_sDevName:='MR4K2_KBV_VGC_2',
                         i_stUSG := fb_MR4K2_KBV_PIP_1.q_IG,
                         i_stDSG := fb_IM5K2_PPM_GCC_1.IG,
                         i_xDis_DPIlk := FALSE,
                         i_xEPS_OK := TRUE,
                         i_xPMPS_OK := TRUE,
                         i_xExt_OK := TRUE,
                         i_xOverrideMode := xSystemOverrideMode2,
                         io_fbFFHWO := g_FastFaultOutput2, fbArbiter := fbArbiter2);

st_LI3K2_K2B_VWC_1_dummy_gauge.xPRESS_OK := TRUE;
st_LI3K2_K2B_VWC_1_dummy_gauge.xAT_VAC := TRUE;
st_LI3K2_K2B_VWC_1_dummy_gauge.eState := ValidLo;
st_LI3K2_K2B_VWC_1_dummy_gauge.rPRESS := 1e-8;

fb_LI3K2_K2B_VWC_1(
                         i_stUSG := st_LI3K2_K2B_VWC_1_dummy_gauge,
                         i_stDSG := st_LI3K2_K2B_VWC_1_dummy_gauge,
                         i_xDis_DPIlk := FALSE,
                         i_xIsAperture := TRUE,
                         i_xEPS_OK := TRUE,
                         i_xPMPS_OK := TRUE,
                         i_xExt_OK := TRUE,
                         i_xOverrideMode := xSystemOverrideMode2,
                         io_fbFFHWO := g_FastFaultOutput2, fbArbiter := fbArbiter2);

fb_SP1K2_PAX_VGC_1(
                         i_stUSG := fb_SL1K2_EXIT_PIP_1.q_IG,
                         i_stDSG := fb_SP1K2_PAX_PIP_1.q_IG,
                         i_xDis_DPIlk := FALSE,
                         i_xEPS_OK := TRUE,
                         i_xPMPS_OK := TRUE,
                         i_xExt_OK := TRUE,
                         i_xOverrideMode := xSystemOverrideMode1,
                         io_fbFFHWO := g_FastFaultOutput1, fbArbiter := fbArbiter1);

fb_LI2K2_K2A_VWC_1(
                         i_stUSG := fb_IM5K2_PPM_GCC_1.IG,
                         i_stDSG := fb_IM5K2_PPM_GCC_1.IG,
                         i_xDis_DPIlk := FALSE,
                         i_xIsAperture := TRUE,
                         i_xEPS_OK := TRUE,
                         i_xPMPS_OK := TRUE,
                         i_xExt_OK := TRUE,
                         i_xOverrideMode := xSystemOverrideMode2,
                         io_fbFFHWO := g_FastFaultOutput2, fbArbiter := fbArbiter2);

//PAX VRCs
bSP1K2_PAX_VRC_1_ILK := F_TurboGateValve_Protection_ILK(i_Turbo:=fb_SP1K2_PAX_PTM_01.iq_stPtm,
                                               i_stISG:=fb_SP1K2_PAX_GPI_1.PG,
                                               i_stBSG:=RIXS_ROUGH_GPI_01.PG,
                                                 ScrollPump:=RIXS_PRO_01.stPump);
fb_SP1K2_PAX_VRC_1(i_xExtILK_OK:=bSP1K2_PAX_VRC_1_ILK,
            i_xOverrideMode:=xSystemOverrideMode1,
            iq_stValve =>);

bSP1K2_PAX_VRC_2_ILK := F_TurboGateValve_Protection_ILK(i_Turbo:=fb_SP1K2_PAX_PTM_02.iq_stPtm,
                                               i_stISG:=fb_SP1K2_PAX_GPI_2.PG,
                                               i_stBSG:=RIXS_ROUGH_GPI_01.PG,
                                                 ScrollPump:=RIXS_PRO_01.stPump);
fb_SP1K2_PAX_VRC_2(i_xExtILK_OK:=bSP1K2_PAX_VRC_2_ILK,
            i_xOverrideMode:=xSystemOverrideMode1,
            iq_stValve =>);

bAT3K2_SOLID_VWC_01_ILK := fb_SP2K2_TXAS_GCP_1.PG.rPRESS < rAT3K2_SOLID_VWC_01_US_PRESS_SP and fb_SP2K2_TXAS_GCP_1.PG.xPRESS_OK
                        and fb_AT3K2_SOLID_GCC_1.IG.rPRESS < rAT3K2_SOLID_VWC_01_DS_PRESS_SP and fb_AT3K2_SOLID_GCC_1.IG.xPress_OK;
fb_AT3K2_SOLID_VWC_01(
    i_xExtILK_OK:= bAT3K2_SOLID_VWC_01_ILK,
    i_xOverrideMode:= xSystemOverrideMode1,
    iq_stValve=> ,
    io_fbFFHWO:= g_FastFaultOutput2,
    fbArbiter:= fbArbiter1,
    i_xPMPS_OK:= FALSE,
    i_xIsAperture:= TRUE,
    i_sDevName:= ,
    i_nTransitionRootID:=
);

//Manual Valve, only readback
fb_SP1K2_PAX_VRM_3(i_xExtILK_OK:=TRUE,
            i_xOverrideMode:=xSystemOverrideMode1,
            iq_stValve =>);

// backing PAX chamber
fb_SP1K2_PAX_VRC_4(i_xExtILK_OK :=  RIXS_PRO_01.stPump.eState = E_PumpState.pumpRUNNING, i_xOverrideMode := xSystemOverrideMode1, iq_stValve =>)	;


//PAX Turbo Pumps (PTM) ILK
fb_SP1K2_PAX_PTM_01(i_xExtIlkOK:= fb_SP1K2_PAX_VRC_4.M_IsOpen()
                AND F_TurboExtILKLogic_2(Turbo:=fb_SP1K2_PAX_PTM_01.iq_stPTM,BackingGauge:=RIXS_ROUGH_GPI_01.PG, InletGauge:=fb_SP1K2_PAX_GPI_1.PG, ScrollPump:= RIXS_PRO_01.stPump) );

fb_SP1K2_PAX_PTM_02(i_xExtIlkOK:= fb_SP1K2_PAX_VRC_4.M_IsOpen()
                AND F_TurboExtILKLogic_2(Turbo:=fb_SP1K2_PAX_PTM_02.iq_stPTM,BackingGauge:=RIXS_ROUGH_GPI_01.PG, InletGauge:=fb_SP1K2_PAX_GPI_2.PG, ScrollPump:= RIXS_PRO_01.stPump) );

fb_LI3K2_K2B_OUT_PTM_01(i_xExtIlkOK:=True, iq_stPTM=>);
fb_LI4K2_K2B_OUT_PTM_01(i_xExtIlkOK:=True, iq_stPTM=>);

(*********SERIAL COMMUNICATION**********)
(*Pfeiffer pumps*)
//SP1K2_PAX_PTM_01
(*Assign adresses to the pfeiffer controllers connected to this serial terminal*)
stPfeiffer_CTRL_SP1K2_PAX_PTM_01[1].iSerialAddress:= 1;
stPfeiffer_CTRL_SP1K2_PAX_PTM_01[1].xEnableComm:= TRUE;
(*Instanitate the Function block for serial communication with Pfeiffer*)
fbPfeifferCom_SP1K2_PAX_PTM_01(astPfeifferControl:= stPfeiffer_CTRL_SP1K2_PAX_PTM_01,
                              astPfeifferStatus:= stPfeiffer_RBK_SP1K2_PAX_PTM_01,
                              SerialRXBuffer:= SerialRXBuffer_SP1K2_PAX_PTM_01,
                              SerialTXBuffer:= SerialTXBuffer_SP1K2_PAX_PTM_01);
(*Copy Status Pv's into the PTM structure*)
fb_SP1K2_PAX_PTM_01.M_Serial_IO(st_Pfeiffer_RBK:= stPfeiffer_RBK_SP1K2_PAX_PTM_01[1],
                            st_Pfeiffer_CTRL:= stPfeiffer_CTRL_SP1K2_PAX_PTM_01[1]);

//SP1K2_PAX_PTM_02
(*Assign adresses to the pfeiffer controllers connected to this serial terminal*)
stPfeiffer_CTRL_SP1K2_PAX_PTM_02[1].iSerialAddress:= 1;
stPfeiffer_CTRL_SP1K2_PAX_PTM_02[1].xEnableComm:= TRUE;
(*Instanitate the Function block for serial communication with Pfeiffer*)
fbPfeifferCom_SP1K2_PAX_PTM_02(astPfeifferControl:= stPfeiffer_CTRL_SP1K2_PAX_PTM_02,
                              astPfeifferStatus:= stPfeiffer_RBK_SP1K2_PAX_PTM_02,
                              SerialRXBuffer:= SerialRXBuffer_SP1K2_PAX_PTM_02,
                              SerialTXBuffer:= SerialTXBuffer_SP1K2_PAX_PTM_02);
(*Copy Status Pv's into the PTM structure*)
fb_SP1K2_PAX_PTM_02.M_Serial_IO(st_Pfeiffer_RBK:= stPfeiffer_RBK_SP1K2_PAX_PTM_02[1],
                            st_Pfeiffer_CTRL:= stPfeiffer_CTRL_SP1K2_PAX_PTM_02[1]);

(*Assign adresses to the pfeiffer controllers connected to this serial terminal*)
stPfeiffer_CTRL_LI3K2_PAX_PTM_01[1].iSerialAddress:= 1;
stPfeiffer_CTRL_LI3K2_PAX_PTM_01[1].xEnableComm:= TRUE;
(*Instanitate the Function block for serial communication with Pfeiffer*)
fbPfeifferCom_LI3K2_PAX_PTM_01(astPfeifferControl:= stPfeiffer_CTRL_LI3K2_PAX_PTM_01,
                              astPfeifferStatus:= stPfeiffer_RBK_LI3K2_PAX_PTM_01,
                              SerialRXBuffer:= SerialRXBuffer_LI3K2_K2B_OUT_PTM_01,
                              SerialTXBuffer:= SerialTXBuffer_LI3K2_K2B_OUT_PTM_01);
(*Copy Status Pv's into the PTM structure*)
fb_LI3K2_K2B_OUT_PTM_01.M_Serial_IO(st_Pfeiffer_RBK:= stPfeiffer_RBK_LI3K2_PAX_PTM_01[1],
                            st_Pfeiffer_CTRL:= stPfeiffer_CTRL_LI3K2_PAX_PTM_01[1]);

(*Assign adresses to the pfeiffer controllers connected to this serial terminal*)
stPfeiffer_CTRL_LI4K2_PAX_PTM_01[1].iSerialAddress:= 1;
stPfeiffer_CTRL_LI4K2_PAX_PTM_01[1].xEnableComm:= TRUE;
(*Instanitate the Function block for serial communication with Pfeiffer*)
fbPfeifferCom_LI4K2_PAX_PTM_01(astPfeifferControl:= stPfeiffer_CTRL_LI4K2_PAX_PTM_01,
                              astPfeifferStatus:= stPfeiffer_RBK_LI4K2_PAX_PTM_01,
                              SerialRXBuffer:= SerialRXBuffer_LI4K2_K2B_OUT_PTM_01,
                              SerialTXBuffer:= SerialTXBuffer_LI4K2_K2B_OUT_PTM_01);
(*Copy Status Pv's into the PTM structure*)
fb_LI4K2_K2B_OUT_PTM_01.M_Serial_IO(st_Pfeiffer_RBK:= stPfeiffer_RBK_LI3K2_PAX_PTM_01[1],
                            st_Pfeiffer_CTRL:= stPfeiffer_CTRL_LI3K2_PAX_PTM_01[1]);

// PIP_Gamma Pumps

fb_PC1K1_ZOS_PIP_1(i_stGauge := fb_PC1K1_ZOS_GPI_1.PG, i_xOverrideMode := xSystemOverrideMode1);
fb_MR1K2_SWITCH_PIP_1(i_stGauge := fb_MR1K2_SWITCH_GPI_1.PG, i_xOverrideMode := xSystemOverrideMode1);
fb_TV1K1_PLEG_PIP_1(i_stGauge := fb_TV1K1_PLEG_GPI_1.PG, i_xOverrideMode := xSystemOverrideMode1);
fb_SL1K2_EXIT_PIP_1(i_stGauge := fb_SL1K2_EXIT_GPI_1.PG, i_xOverrideMode := xSystemOverrideMode1);
fb_ST1K2_PPS_PIP_1(i_stGauge := fb_ST1K2_PPS_GPI_1.PG, i_xOverrideMode := xSystemOverrideMode1);
fb_MR2K2_FLAT_PIP_1(i_stGauge := fb_MR2K2_FLAT_GPI_1.PG, i_xOverrideMode := xSystemOverrideMode2);
fb_MR3K2_KBH_PIP_1(i_stGauge := fb_MR3K2_KBH_GPI_1.PG, i_xOverrideMode := xSystemOverrideMode2);
fb_MR4K2_KBV_PIP_1(i_stGauge := fb_MR4K2_KBV_GPI_1.PG, i_xOverrideMode := xSystemOverrideMode2);
fb_TV4K2_PIP_1(i_stGauge := bm_dummy_gauge, i_xOverrideMode := xSystemOverrideMode2);
fb_IM5K2_PPM_PIP_1(i_stGauge := bm_dummy_gauge, i_xOverrideMode := xSystemOverrideMode2);
fb_PA1K2_PIP_1(i_stGauge := bm_dummy_gauge, i_xOverrideMode := xSystemOverrideMode2);
fb_SP1K2_PAX_PIP_1(i_stGauge := fb_ST1K2_PPS_GPI_1.PG, i_xOverrideMode := xSystemOverrideMode1);  //change interlock to SP1K2 GPI once connected

//SIP Pumps
fb_IM2K2_PPM_PIP_1(i_stGauge := bm_dummy_gauge, i_xOverrideMode := xSystemOverrideMode2);
fb_IM3K2_PPM_PIP_1(i_stGauge := bm_dummy_gauge, i_xOverrideMode := xSystemOverrideMode2);
fb_IM4K2_PPM_PIP_1(i_stGauge := bm_dummy_gauge, i_xOverrideMode := xSystemOverrideMode2);
fb_LI2K2_K2A_PIP_1(i_stGauge := bm_dummy_gauge, i_xOverrideMode := xSystemOverrideMode2);
fb_SP2K2_TXAS_PIP_1(i_stGauge := bm_dummy_gauge, i_xOverrideMode := xSystemOverrideMode2);

//Fast shutter Valve Interface
vfs_dummy_gauge.xPRESS_OK := TRUE;
vfs_dummy_gauge.rPRESS := 0.0000001;
fb_TV1K2_VFS_Interface(IG:=fb_TV4K2_GFS_1.IG, iq_stValve=> , Veto_Valve:=fb_MR4K2_KBV_VGC_2.iq_stValve, i_xVAC_FAULT_OK=> );
//TV1K2_VFS_Interface(IG:= fb_TV4K2_GFS_1.IG);


//Interface for KFE VAC SP1K1-ZOS-VGC-2
// Update interlock signals for RIX
fb_RIX_ILK(
    VG	:=	fb_PC1K1_ZOS_PIP_1.q_IG, //fb_PC1K1_ZOS_GCC_1.IG,
    ILK	:=	st_RIX_ILK
);
]]></ST>
    </Implementation>
  </POU>
</TcPlcObject>